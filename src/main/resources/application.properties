quarkus.application.name=account-service
quarkus.http.port=8081

# Configuración de la conexión a MongoDB
quarkus.mongodb.connection-string=mongodb://admin:admin@localhost:27017/?authSource=admin&retryWrites=false
quarkus.mongodb.database=bank_account_db

# Configuración de logging
quarkus.log.level=INFO
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{3.}] (%t) %s%e%n
quarkus.log.console.enable=true

# Configuración de OpenAPI (Swagger UI)
quarkus.smallrye-openapi.path=/openapi
quarkus.swagger-ui.path=/swagger-ui

# Configuración del REST Client para la comunicación inter-microservicios
quarkus.rest-client."customer-service".url=http://localhost:8080
quarkus.rest-client."customer-service".read-timeout=5000

#CONFIGURACIÓN DE MICROPROFILE FAULT TOLERANCE (TIMEOUT & CIRCUIT BREAKER)
#1. Definición del valor base del Timeout (1000 milisegundos = 1 segundo)
account-service.timeout.ms=1000
# Timeout más largo para consultas analíticas o reportes pesados
account-service.analytic-timeout.ms=5000
# ====================================================================
# CONFIGURACIÓN DE POLÍTICAS DE CIRCUIT BREAKER (Común a los 3 métodos)
# ====================================================================
# Tamaño de la ventana de solicitudes (Circuit Breaker solo evalúa fallos si se han realizado 10 llamadas)
account-service.cb.request-volume=10
# Si el 60% de las solicitudes fallan, el circuito se abre
account-service.cb.failure-ratio=0.6
# Tiempo que el circuito permanece abierto (5 segundos)
account-service.cb.delay=5000
# Número de llamadas exitosas para cerrar el circuito desde HALF_OPEN
account-service.cb.success-threshold=3

# ====================================================================
# 1. buscarPorCuentaId (Transaccional Rápida: 1s Timeout)
# ====================================================================
com.bancario.account.service.impl.AccountServiceImpl/buscarPorCuentaId/Timeout/value=${account-service.timeout.ms}
com.bancario.account.service.impl.AccountServiceImpl/buscarPorCuentaId/CircuitBreaker/requestVolumeThreshold=${account-service.cb.request-volume}
com.bancario.account.service.impl.AccountServiceImpl/buscarPorCuentaId/CircuitBreaker/failureRatio=${account-service.cb.failure-ratio}
com.bancario.account.service.impl.AccountServiceImpl/buscarPorCuentaId/CircuitBreaker/delay=${account-service.cb.delay}
com.bancario.account.service.impl.AccountServiceImpl/buscarPorCuentaId/CircuitBreaker/successThreshold=${account-service.cb.success-threshold}

# ====================================================================
# 2. getDailyBalancesByCustomer (Analítica Pesada: 5s Timeout)
# ====================================================================
com.bancario.account.service.impl.AccountServiceImpl/getDailyBalancesByCustomer/Timeout/value=${account-service.analytic-timeout.ms}
com.bancario.account.service.impl.AccountServiceImpl/getDailyBalancesByCustomer/CircuitBreaker/requestVolumeThreshold=${account-service.cb.request-volume}
com.bancario.account.service.impl.AccountServiceImpl/getDailyBalancesByCustomer/CircuitBreaker/failureRatio=${account-service.cb.failure-ratio}
com.bancario.account.service.impl.AccountServiceImpl/getDailyBalancesByCustomer/CircuitBreaker/delay=${account-service.cb.delay}
com.bancario.account.service.impl.AccountServiceImpl/getDailyBalancesByCustomer/CircuitBreaker/successThreshold=${account-service.cb.success-threshold}

# ====================================================================
# 3. incrementMonthlyTransactionCounter (Transaccional Crítica: 1s Timeout)
# ====================================================================
com.bancario.account.service.impl.AccountServiceImpl/incrementMonthlyTransactionCounter/Timeout/value=${account-service.timeout.ms}
com.bancario.account.service.impl.AccountServiceImpl/incrementMonthlyTransactionCounter/CircuitBreaker/requestVolumeThreshold=${account-service.cb.request-volume}
com.bancario.account.service.impl.AccountServiceImpl/incrementMonthlyTransactionCounter/CircuitBreaker/failureRatio=${account-service.cb.failure-ratio}
com.bancario.account.service.impl.AccountServiceImpl/incrementMonthlyTransactionCounter/CircuitBreaker/delay=${account-service.cb.delay}
com.bancario.account.service.impl.AccountServiceImpl/incrementMonthlyTransactionCounter/CircuitBreaker/successThreshold=${account-service.cb.success-threshold}